---
source: src/tests.rs
expression: result
---
Item: TestTrait
Kind: Trait
Visibility: Public
Defined at: test_crate::TestTrait

A trait for testing extremely long documentation that exceeds line limits.

This trait provides a comprehensive interface for data processing operations.
It demonstrates various method signatures including mutable references,
error handling, and different return types. The trait is designed to be
flexible and extensible for different use cases in data processing pipelines.
Each method serves a specific purpose in the data transformation workflow.
The implementation should handle edge cases gracefully and provide meaningful
error messages when operations fail. This documentation intentionally spans
many lines to test the line-based truncation when paragraph truncation
doesn't apply. We want to see how the system handles documentation that
goes well beyond the 16-line limit and should trigger line-based truncation.
This continues for several more lines to ensure we exceed the limit.
Line 14 of this very long paragraph that should be truncated.
Line 15 of this extremely verbose documentation example.
Line 16 which should be the last line shown in brief mode.
[+7 lines elided]


```rust
trait TestTrait {
    /// trait associated constant
    const ASSOCIATED_CONSTANT: ();
    /// trait associated type
    type T: Clone;
    /// A method
    fn test_method(&self) -> String;
    /// Another method with parameters
    fn process(&mut self, data: &str) -> Result<(), String>;
}
```
