---
source: src/tests.rs
expression: result
---
Item: test_crate
Kind: Module
Visibility: Public
Defined at: test_crate

A minimal test crate for rustdoc JSON MCP testing


Modules:
reexport_mod
submodule // A module with items

Structs:
GenericStruct // A generic struct for testing multi-paragraph documentation. [+14 more lines]
SubStruct // A struct in a submodule
TestStruct // A simple struct for testing basic functionality. [+3 more lines]
TupleStruct // A tuple struct for testing
UnitStruct // A unit struct for testing
Vec // A contiguous growable array type, written as `Vec<T>`, short for 'vector'. [+257 more lines]
reexport_mod::SubStruct // A struct in a submodule
submodule::SubStruct // A struct in a submodule

Enums:
GenericEnum // A generic enum for testing
TestEnum // An enum for testing
reexport_mod::TestEnum // An enum for testing
submodule::TestEnum // An enum for testing

Traits:
ComplexTrait // A more complex trait demonstrating various features
TestTrait // A trait for testing extremely long documentation that exceeds line limits. [+22 more lines]

Functions:
SubStruct::double // Double the value
SubStruct::get_value // Get the value
SubStruct::new // Create a new SubStruct
TestStruct::get_field // Get the field value
TestStruct::increment_count // Update the count
TestStruct::new // Create a new TestStruct
Vec::allocator // Returns a reference to the underlying allocator.
Vec::append // Moves all the elements of `other` into `self`, leaving `other` empty. [+14 more lines]
Vec::as_mut_ptr // Returns a raw mutable pointer to the vector's buffer, or a dangling [+51 more lines]
Vec::as_mut_slice // Extracts a mutable slice of the entire vector. [+10 more lines]
Vec::as_non_null // Returns a `NonNull` pointer to the vector's buffer, or a dangling [+55 more lines]
Vec::as_ptr // Returns a raw pointer to the vector's buffer, or a dangling raw pointer [+52 more lines]
Vec::as_slice // Extracts a slice containing the entire vector. [+10 more lines]
Vec::capacity // Returns the total number of elements the vector can hold without [+22 more lines]
Vec::clear // Clears the vector, removing all values. [+13 more lines]
Vec::dedup // Removes consecutive repeated elements in the vector according to the [+13 more lines]
Vec::dedup_by // Removes all but the first of consecutive elements in the vector satisfying a given equality [+17 more lines]
Vec::dedup_by_key // Removes all but the first of consecutive elements in the vector that resolve to the same [+13 more lines]
Vec::drain // Removes the subslice indicated by the given range from the vector, [+31 more lines]
Vec::extend_from_slice // Clones and appends all elements in a slice to the `Vec`. [+17 more lines]
Vec::extend_from_within // Given a range `src`, clones a slice of elements in that range and appends it to the end. [+23 more lines]
Vec::extract_if // Creates an iterator which uses a closure to determine if an element in the range should be removed. [+72 more lines]
Vec::from_parts // Creates a `Vec<T>` directly from a `NonNull` pointer, a length, and a capacity. [+103 more lines]
Vec::from_parts_in // Creates a `Vec<T, A>` directly from a `NonNull` pointer, a length, a capacity, [+106 more lines]
Vec::from_raw_parts // Creates a `Vec<T>` directly from a pointer, a length, and a capacity. [+99 more lines]
Vec::from_raw_parts_in // Creates a `Vec<T, A>` directly from a pointer, a length, a capacity, [+106 more lines]
Vec::insert // Inserts an element at position `index` within the vector, shifting all [+21 more lines]
Vec::into_boxed_slice // Converts the vector into [`Box<[T]>`][owned slice]. [+24 more lines]
Vec::into_chunks // Groups every `N` elements in the `Vec<T>` into chunks to produce a `Vec<[T; N]>`, dropping [+23 more lines]
Vec::into_flattened // Takes a `Vec<[T; N]>` and flattens it into a `Vec<T>`. [+18 more lines]
Vec::into_parts // Decomposes a `Vec<T>` into its raw components: `(NonNull pointer, length, capacity)`. [+32 more lines]
Vec::into_parts_with_alloc // Decomposes a `Vec<T>` into its raw components: `(NonNull pointer, length, capacity, allocator)`. [+36 more lines]
Vec::into_raw_parts // Decomposes a `Vec<T>` into its raw components: `(pointer, length, capacity)`. [+31 more lines]
Vec::into_raw_parts_with_alloc // Decomposes a `Vec<T>` into its raw components: `(pointer, length, capacity, allocator)`. [+36 more lines]
Vec::is_empty // Returns `true` if the vector contains no elements. [+10 more lines]
Vec::leak // Consumes and leaks the `Vec`, returning a mutable reference to the contents, [+27 more lines]
Vec::len // Returns the number of elements in the vector, also referred to [+8 more lines]
Vec::new // Constructs a new, empty `Vec<T>`. [+9 more lines]
Vec::new_in // Constructs a new, empty `Vec<T, A>`. [+13 more lines]
Vec::peek_mut // Returns a mutable reference to the last item in the vector, or [+20 more lines]
Vec::pop // Removes the last element from a vector and returns it, or [`None`] if it [+18 more lines]
Vec::pop_if // Removes and returns the last element from a vector if the predicate [+13 more lines]
Vec::push // Appends an element to the back of a collection. [+19 more lines]
Vec::push_within_capacity // Appends an element if there is sufficient spare capacity, otherwise an error is returned [+34 more lines]
Vec::remove // Removes and returns the element at position `index` within the vector, [+22 more lines]
Vec::reserve // Reserves capacity for at least `additional` more elements to be inserted [+16 more lines]
Vec::reserve_exact // Reserves the minimum capacity for at least `additional` more elements to [+23 more lines]
Vec::resize // Resizes the `Vec` in-place so that `len` is equal to `new_len`. [+26 more lines]
Vec::resize_with // Resizes the `Vec` in-place so that `len` is equal to `new_len`. [+29 more lines]
Vec::retain // Retains only the elements specified by the predicate. [+23 more lines]
Vec::retain_mut // Retains only the elements specified by the predicate, passing a mutable reference to it. [+17 more lines]
Vec::set_len // Forces the length of the vector to `new_len`. [+85 more lines]
Vec::shrink_to // Shrinks the capacity of the vector with a lower bound. [+17 more lines]
Vec::shrink_to_fit // Shrinks the capacity of the vector as much as possible. [+16 more lines]
Vec::spare_capacity_mut // Returns the remaining spare capacity of the vector as a slice of [+27 more lines]
Vec::splice // Creates a splicing iterator that replaces the specified range in the vector [+42 more lines]
Vec::split_at_spare_mut // Returns vector content as a slice of `T`, along with the remaining spare [+50 more lines]
Vec::split_off // Splits the collection into two at the given index. [+23 more lines]
Vec::swap_remove // Removes an element from the vector and returns it. [+23 more lines]
Vec::truncate // Shortens the vector, keeping the first `len` elements and dropping [+41 more lines]
Vec::try_reserve // Tries to reserve capacity for at least `additional` more elements to be inserted [+31 more lines]
Vec::try_reserve_exact // Tries to reserve the minimum capacity for at least `additional` [+37 more lines]
Vec::try_with_capacity // Constructs a new, empty `Vec<T>` with at least the specified capacity. [+9 more lines]
Vec::try_with_capacity_in // Constructs a new, empty `Vec<T, A>` with at least the specified capacity [+10 more lines]
Vec::with_capacity // Constructs a new, empty `Vec<T>` with at least the specified capacity. [+49 more lines]
Vec::with_capacity_in // Constructs a new, empty `Vec<T, A>` with at least the specified capacity [+54 more lines]
async_function // An async function
generic_function // A generic function
reexport_mod::SubStruct::double // Double the value
reexport_mod::SubStruct::get_value // Get the value
reexport_mod::SubStruct::new // Create a new SubStruct
reexport_mod::sub_function // A function in a submodule
sub_function // A function in a submodule
submodule::SubStruct::double // Double the value
submodule::SubStruct::get_value // Get the value
submodule::SubStruct::new // Create a new SubStruct
submodule::sub_function // A function in a submodule
test_function // A public function

Constants:
TEST_CONSTANT // A const for testing

Statics:
TEST_STATIC // A static for testing

Variants:
GenericEnum::Mixed // Variant with mixed generics
GenericEnum::Simple // Simple variant
GenericEnum::WithData // Variant with generic data
TestEnum::VariantA // Variant A
TestEnum::VariantB // Variant B with data
TestEnum::VariantC // Variant C with struct data
VariantA // Variant A
VariantB // Variant B with data
VariantC // Variant C with struct data
reexport_mod::TestEnum::VariantA // Variant A
reexport_mod::TestEnum::VariantB // Variant B with data
reexport_mod::TestEnum::VariantC // Variant C with struct data
reexport_mod::VariantA // Variant A
reexport_mod::VariantB // Variant B with data
reexport_mod::VariantC // Variant C with struct data
submodule::TestEnum::VariantA // Variant A
submodule::TestEnum::VariantB // Variant B with data
submodule::TestEnum::VariantC // Variant C with struct data
submodule::VariantA // Variant A
submodule::VariantB // Variant B with data
submodule::VariantC // Variant C with struct data

AssocConst:
TestStruct::ASSOCIATED_CONST // This is an associated constant for a struct
