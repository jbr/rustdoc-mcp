---
source: src/tests.rs
expression: result_std_root
---
Item: std
Kind: Module
Visibility: Public
Defined at: std

# The Rust Standard Library

The Rust Standard Library is the foundation of portable Rust software, a
set of minimal and battle-tested shared abstractions for the [broader Rust
ecosystem][crates.io]. It offers core types, like [`Vec<T>`] and
[`Option<T>`], library-defined [operations on language
primitives](#primitives), [standard macros](#macros), [I/O] and
[multithreading], among [many other things][other].
[+209 lines elided]


Modules:
alloc // Memory allocation APIs. [+53 more lines]
any // Utilities for dynamic typing or type reflection. [+83 more lines]
arch // SIMD and vendor intrinsics module. [+351 more lines]
array // Utilities for the array primitive type. [+2 more lines]
ascii // Operations on ASCII strings and characters. [+11 more lines]
async_iter // Composable asynchronous iteration. [+121 more lines]
autodiff // This module provides support for automatic differentiation.
backtrace // Support for capturing a stack backtrace of an OS thread [+58 more lines]
borrow // A module for working with borrowed data.
boxed // The `Box<T>` type for heap allocation. [+181 more lines]
bstr // The `ByteStr` and `ByteString` types and trait implementations.
cell // Shareable mutable containers. [+248 more lines]
char // Utilities for the `char` primitive type. [+17 more lines]
clone // The `Clone` trait for types that cannot be 'implicitly copied'. [+34 more lines]
cmp // Utilities for comparing and ordering values. [+23 more lines]
collections // Collection types. [+407 more lines]
convert // Traits for conversions between types. [+33 more lines]
default // The `Default` trait for types with a default value.
env // Inspection and manipulation of the process's environment. [+8 more lines]
error // Interfaces for working with Errors. [+139 more lines]
f128 // Constants for the `f128` quadruple-precision floating point type. [+4 more lines]
f16 // Constants for the `f16` half-precision floating point type. [+4 more lines]
f32 // Constants for the `f32` single-precision floating point type. [+9 more lines]
f64 // Constants for the `f64` double-precision floating point type. [+9 more lines]
ffi // Utilities related to FFI bindings. [+159 more lines]
fmt // Utilities for formatting and printing `String`s. [+584 more lines]
from // Unstable module containing the unstable `From` derive macro.
fs // Filesystem manipulation operations. [+26 more lines]
future // Asynchronous basic functionality. [+7 more lines]
hash // Generic hashing support. [+81 more lines]
hint // Hints to compiler that affects how code should be emitted or optimized. [+2 more lines]
i128 // Redundant constants module for the [`i128` primitive type][i128]. [+2 more lines]
i16 // Redundant constants module for the [`i16` primitive type][i16]. [+2 more lines]
i32 // Redundant constants module for the [`i32` primitive type][i32]. [+2 more lines]
i64 // Redundant constants module for the [`i64` primitive type][i64]. [+2 more lines]
i8 // Redundant constants module for the [`i8` primitive type][i8]. [+2 more lines]
intrinsics // Compiler intrinsics. [+45 more lines]
io // Traits, helpers, and type definitions for core I/O functionality. [+292 more lines]
isize // Redundant constants module for the [`isize` primitive type][isize]. [+2 more lines]
iter // Composable external iteration. [+353 more lines]
marker // Primitive traits and types representing basic properties of types. [+4 more lines]
mem // Basic functions for dealing with memory. [+3 more lines]
net // Networking primitives for TCP/UDP communication. [+19 more lines]
num // Additional functionality for numerics. [+3 more lines]
ops // Overloadable operators. [+136 more lines]
option // Optional values. [+571 more lines]
os // OS-specific functionality.
panic // Panic support in the standard library.
pat // Helper module for exporting the `pattern_type` macro
path // Cross-platform path manipulation. [+64 more lines]
pin // Types that pin data to a location in memory. [+918 more lines]
prelude // # The Rust Prelude [+106 more lines]
process // A module for working with processes. [+145 more lines]
ptr // Manually manage memory through raw pointers. [+393 more lines]
random // Random value generation.
range // # Experimental replacement range types [+16 more lines]
rc // Single-threaded reference-counting pointers. 'Rc' stands for 'Reference [+239 more lines]
result // Error handling with the `Result` type. [+528 more lines]
simd // Portable SIMD module. [+38 more lines]
slice // Utilities for the slice primitive type. [+8 more lines]
str // Utilities for the `str` primitive type. [+2 more lines]
string // A UTF-8â€“encoded, growable string. [+40 more lines]
sync // Useful synchronization primitives. [+165 more lines]
task // Types and Traits for working with asynchronous tasks.
thread // Native threads. [+150 more lines]
time // Temporal quantification. [+29 more lines]
u128 // Redundant constants module for the [`u128` primitive type][u128]. [+2 more lines]
u16 // Redundant constants module for the [`u16` primitive type][u16]. [+2 more lines]
u32 // Redundant constants module for the [`u32` primitive type][u32]. [+2 more lines]
u64 // Redundant constants module for the [`u64` primitive type][u64]. [+2 more lines]
u8 // Redundant constants module for the [`u8` primitive type][u8]. [+2 more lines]
unsafe_binder // Operators used to turn types into unsafe binders and back.
usize // Redundant constants module for the [`usize` primitive type][usize]. [+2 more lines]
vec // A contiguous growable array type with heap-allocated contents, written [+71 more lines]
vec // A contiguous growable array type with heap-allocated contents, written [+71 more lines]

Macros:
format // Creates a `String` using interpolation of runtime expressions. [+42 more lines]
